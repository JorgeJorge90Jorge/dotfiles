--langdef=Clojure
--langmap=Clojure:.clj
--regex-clojure=/[ \t]*create-ns[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/n,namespace/
--regex-clojure=/[ \t]*def[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/d,definition/
--regex-clojure=/[ \t]*defn[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/f,function/
--regex-clojure=/[ \t]*defn-[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/p,private function/
--regex-clojure=/[ \t]*defmacro[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/m,macro/
--regex-clojure=/[ \t]*definline[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/i,inline/
--regex-clojure=/[ \t]*defmulti[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/a,multimethod definition/
--regex-clojure=/[ \t]*defmethod[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/b,multimethod instance/
--regex-clojure=/[ \t]*defonce[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/c,definition (once)/
--regex-clojure=/[ \t]*defstruct[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/s,struct/
--regex-clojure=/[ \t]*intern[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/v,intern/
--regex-clojure=/[ \t]*ns[ \t]+([-[:alnum:]*+!_\/?<>][-[:alnum:]*+!_\/?<>:.]*)/\1/n,namespace/
--regex-ruby=/(^|;)[ \t]*(class|module)[ \t]+([A-Z][[:alnum:]_]+(::[A-Z][[:alnum:]_]+)+)/\3/c,class,constant/
--regex-ruby=/(^|;)[ \t]*(private|protected|public|module_function)(_class_method)?\(? def *(self.)?([[:alnum:]_?!]+)/\5/f,inline scoped method/
--regex-ruby=/(^|[:;])[ \t]*([A-Z][[:alnum:]_]+) *=/\2/c,class,constant/
--regex-ruby=/(^|^[[:blank:]]*)task[ \t\:']*([A-Za-z0-9_]*)/\2/t,tasks/
--regex-ruby=/(^|^[[:blank:]]*)namespace[ \t\:]*([A-Za-z0-9_]*)/\2/n,namespaces/
